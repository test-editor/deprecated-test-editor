/*******************************************************************************
 * Copyright (c) 2012 - 2015 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 *******************************************************************************/
package org.testeditor.ui.handlers;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.eclipse.e4.core.contexts.ContextInjectionFactory;
import org.eclipse.e4.core.contexts.EclipseContextFactory;
import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.TreeSelection;
import org.eclipse.swt.widgets.Shell;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.testeditor.core.exceptions.SystemException;
import org.testeditor.core.model.teststructure.TestCase;
import org.testeditor.core.model.teststructure.TestProject;
import org.testeditor.core.model.teststructure.TestStructure;
import org.testeditor.core.model.teststructure.TestSuite;
import org.testeditor.core.services.interfaces.TestStructureService;
import org.testeditor.ui.adapter.MPartAdapter;
import org.testeditor.ui.adapter.PartServiceAdapter;
import org.testeditor.ui.adapter.TestStructureServiceAdapter;
import org.testeditor.ui.mocks.TestExplorerMock;

/**
 * 
 * Tests for OpenTestLogHandler.
 *
 */
public class OpenTestLogHandlerTest {

	private Shell shell;

	/**
	 * Test the can Execute method. can execute is allowed on testcases which an
	 * testlog in the backend system.
	 */
	@Test
	public void testCanExecute() {
		IEclipseContext context = EclipseContextFactory.create();
		final TestCase testCaseWithLog = new TestCase();
		context.set(TestStructureService.class, new TestStructureServiceAdapter() {
			@Override
			public boolean hasLogData(TestStructure testStructure) throws SystemException {
				return testStructure == testCaseWithLog;
			}
		});
		OpenTestLogHandler openTestLogHandler = ContextInjectionFactory.make(OpenTestLogHandler.class, context);
		assertFalse(openTestLogHandler.canExecute(shell, getPartServiceMock(new TestSuite())));
		assertFalse(openTestLogHandler.canExecute(shell, getPartServiceMock(new TestProject())));
		assertFalse(openTestLogHandler.canExecute(shell, getPartServiceMock(new TestCase())));
		assertTrue(openTestLogHandler.canExecute(shell, getPartServiceMock(testCaseWithLog)));
	}

	/**
	 * 
	 * @param selection
	 *            used as selection in the tree.
	 * @return PartServiceMock to look up the tree selection.
	 */
	private EPartService getPartServiceMock(final TestStructure selection) {
		return new PartServiceAdapter() {
			@Override
			public MPart findPart(String id) {
				return new MPartAdapter() {
					public Object getObject() {
						return new TestExplorerMock() {
							@Override
							public IStructuredSelection getSelection() {
								return new TreeSelection() {
									@Override
									public Object getFirstElement() {
										return selection;
									}
								};
							}
						};
					}
				};
			}
		};
	}

	/**
	 * Create shell for test execution.
	 */
	@Before
	public void setup() {
		shell = new Shell();
	}

	/**
	 * Dispose ui handles.
	 */
	@After
	public void tearDown() {
		shell.dispose();
	}

}
