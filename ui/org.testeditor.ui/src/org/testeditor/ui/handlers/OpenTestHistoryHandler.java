/*******************************************************************************
 * Copyright (c) 2012 - 2015 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 *******************************************************************************/
package org.testeditor.ui.handlers;

import javax.inject.Named;

import org.eclipse.e4.core.di.annotations.CanExecute;
import org.eclipse.e4.core.di.annotations.Execute;
import org.eclipse.e4.core.services.events.IEventBroker;
import org.eclipse.e4.ui.services.IServiceConstants;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.swt.widgets.Shell;
import org.testeditor.core.model.teststructure.TestCase;
import org.testeditor.core.model.teststructure.TestStructure;
import org.testeditor.core.model.teststructure.TestSuite;
import org.testeditor.ui.constants.TestEditorConstants;
import org.testeditor.ui.parts.testExplorer.TestExplorer;
import org.testeditor.ui.parts.testhistory.TestHistoryPart;

/**
 * opens the history for the selected test.
 * 
 * 
 */
public class OpenTestHistoryHandler {

	/**
	 * Executes the handler to show test log in a dialog.
	 * 
	 * @param shell
	 *            The active shell
	 * @param partService
	 *            of the active window.
	 * @param eventBroker
	 *            to fire the event show history
	 */
	@Execute
	public void execute(@Named(IServiceConstants.ACTIVE_SHELL) Shell shell, EPartService partService,
			IEventBroker eventBroker) {

		TestExplorer testExplorer = (TestExplorer) partService.findPart(TestEditorConstants.TEST_EXPLORER_VIEW)
				.getObject();

		// Receive selected tree path via TreeViewer object
		Object selectedElement = testExplorer.getSelection().getFirstElement();
		if (selectedElement == null) {
			return; // Handler depends on a selected path
		}

		// Receive selected tree element of selected path
		TestStructure selectedTestStructure = (TestStructure) selectedElement;
		partService.activate(partService.findPart(TestHistoryPart.ID));
		TestHistoryPart thPart = (TestHistoryPart) partService.findPart(TestHistoryPart.ID).getObject();
		thPart.showTestHistory(selectedTestStructure);
	}

	/**
	 * Check if this Handler is enabled on the selection. Only one Teststrucutre
	 * is valid as a selection.
	 * 
	 * @param partService
	 *            to get the TestCaseExplorer
	 * @return true if only one element is selected.
	 */
	@CanExecute
	public boolean canExecute(EPartService partService) {
		TestExplorer explorer = (TestExplorer) partService.findPart(TestEditorConstants.TEST_EXPLORER_VIEW).getObject();
		CanExecuteTestExplorerHandlerRules canExecuteTestExplorerHandlerRules = new CanExecuteTestExplorerHandlerRules();
		return canExecuteTestExplorerHandlerRules.canExecuteOnlyOneElementRule(explorer)
				&& !canExecuteTestExplorerHandlerRules.canExecuteOnTestScenarienSuiteRule(explorer)
				&& !canExecuteTestExplorerHandlerRules.canExecuteOnTestScenarioRule(explorer)
				&& (explorer.getSelection().getFirstElement() instanceof TestCase || explorer.getSelection()
						.getFirstElement() instanceof TestSuite);
	}

}
