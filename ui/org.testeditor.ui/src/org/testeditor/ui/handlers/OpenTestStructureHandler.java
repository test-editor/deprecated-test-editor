/*******************************************************************************
 * Copyright (c) 2012 - 2015 Signal Iduna Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Signal Iduna Corporation - initial API and implementation
 * akquinet AG
 *******************************************************************************/
package org.testeditor.ui.handlers;

import java.util.Collection;
import java.util.Iterator;

import org.apache.log4j.Logger;
import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.core.di.annotations.CanExecute;
import org.eclipse.e4.core.di.annotations.Execute;
import org.eclipse.e4.ui.model.application.ui.basic.MPart;
import org.eclipse.e4.ui.workbench.modeling.EPartService;
import org.eclipse.e4.ui.workbench.modeling.EPartService.PartState;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.testeditor.core.model.teststructure.TestCase;
import org.testeditor.core.model.teststructure.TestFlow;
import org.testeditor.core.model.teststructure.TestProject;
import org.testeditor.core.model.teststructure.TestScenario;
import org.testeditor.core.model.teststructure.TestStructure;
import org.testeditor.core.model.teststructure.TestSuite;
import org.testeditor.ui.ITestStructureEditor;
import org.testeditor.ui.constants.TestEditorConstants;
import org.testeditor.ui.parts.editor.view.TestEditorTestCaseController;
import org.testeditor.ui.parts.editor.view.TestEditorTestScenarioController;
import org.testeditor.ui.parts.projecteditor.TestProjectEditor;
import org.testeditor.ui.parts.testExplorer.TestExplorer;
import org.testeditor.ui.parts.testsuite.TestSuiteEditor;

/**
 * Opens the selected TestStructure Object of the TestExplorer in an TestEditor.
 * If the TestStructure is already opened, it activates the associated
 * TestEditor.
 * 
 */
public class OpenTestStructureHandler {

	private static final Logger LOGGER = Logger.getLogger(OpenTestStructureHandler.class);

	/**
	 * 
	 * @param testStructure
	 *            TestFlow
	 * @param context
	 *            the active EclipseContext
	 */
	public void execute(TestFlow testStructure, IEclipseContext context) {
		if (testStructure instanceof TestCase) {
			execute((TestCase) testStructure, context);
		} else if (testStructure instanceof TestScenario) {
			execute((TestScenario) testStructure, context);
		}
	}

	/**
	 * 
	 * @param testStructure
	 *            TestFlow
	 * @param testEditorControllerId
	 *            the id of the part-controller
	 * @param context
	 *            the active EclipseContext
	 */
	public void execute(TestFlow testStructure, String testEditorControllerId, IEclipseContext context) {
		LOGGER.trace("Opening: " + testStructure.getFullName());
		createOrShowPart(testStructure, testEditorControllerId, context);
	}

	/**
	 * Searches a part for a given {@link TestStructure}. If no part found part
	 * is null the part will be created and shown, otherwise the part will be
	 * shown only. At the end active part will be returned.
	 * 
	 * @param testStructure
	 *            TestStructure
	 * @param testEditorControllerId
	 *            testEditorControllerId
	 * @param context
	 *            the active EclipseContext
	 * 
	 * @return will be return active part
	 */
	private MPart createOrShowPart(TestStructure testStructure, String testEditorControllerId, IEclipseContext context) {

		EPartService partService = context.get(EPartService.class);
		MPart mPart = searchForOpenTestStructureEditor(testEditorControllerId, testStructure, partService);

		if (mPart == null) {
			mPart = partService.createPart(testEditorControllerId);
			partService.showPart(mPart, PartState.ACTIVATE);
			mPart.setOnTop(true);
			ITestStructureEditor editor = (ITestStructureEditor) mPart.getObject();
			editor.setTestStructure(testStructure);
			mPart.setTooltip(testStructure.getFullName());
		} else {
			partService.showPart(mPart, PartState.ACTIVATE);
		}

		return mPart;
	}

	/**
	 * 
	 * @param testStructure
	 *            TestScenario
	 * @param context
	 *            the active EclipseContext
	 */
	public void execute(TestScenario testStructure, IEclipseContext context) {
		execute(testStructure, TestEditorTestScenarioController.ID, context);
	}

	/**
	 * 
	 * @param testStructure
	 *            TestCase
	 * @param context
	 *            the active EclipseContext
	 */
	public void execute(TestCase testStructure, IEclipseContext context) {
		execute(testStructure, TestEditorTestCaseController.ID, context);
	}

	/**
	 * 
	 * Opens a TestSuite Editor for the given TestSuite.
	 * 
	 * @param testSuite
	 *            TestSuite to be opened in the TestSuite Editor.
	 * @param context
	 *            the active EclipseContext
	 */
	public void execute(TestSuite testSuite, IEclipseContext context) {
		LOGGER.trace("Opening: " + testSuite.getFullName());
		createOrShowPart(testSuite, TestSuiteEditor.ID, context);
	}

	/**
	 * 
	 * @param testProject
	 *            to open in the Editor.
	 * @param context
	 *            the active EclipseContext
	 */
	public void execute(TestProject testProject, IEclipseContext context) {
		LOGGER.trace("Opening: " + testProject.getFullName());
		MPart mPart = createOrShowPart(testProject, TestProjectEditor.ID, context);

		((TestProjectEditor) mPart.getObject()).setFocus();
	}

	/**
	 * Searches the existing Editor instances for an already open Editor with
	 * the TestStructure.
	 * 
	 * @param editorID
	 *            to identify parts that are editors.
	 * @param testStructure
	 *            to be opened in the editor.
	 * @param partService
	 *            of the active window.
	 * @return the MPart of the Editor or null if no one is found.
	 */
	protected MPart searchForOpenTestStructureEditor(String editorID, TestStructure testStructure,
			EPartService partService) {
		MPart mpart = null;
		Collection<MPart> parts = partService.getParts();
		for (MPart mPart2 : parts) {
			if (mPart2.getElementId().equals(editorID) && (mPart2.getObject()) != null
					&& ((ITestStructureEditor) mPart2.getObject()).getTestStructure().equals(testStructure)) {
				mpart = mPart2;
			}
		}
		return mpart;
	}

	/**
	 * Opens all in the TestExplorer selected elements.
	 * 
	 * @param context
	 *            to get the TestCase tree.
	 */
	@Execute
	public void execute(IEclipseContext context) {
		TestExplorer testExplorer = (TestExplorer) context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
		IStructuredSelection sel = testExplorer.getSelection();
		@SuppressWarnings("unchecked")
		Iterator<TestStructure> it = sel.iterator();
		TestStructure lastOne = null;
		while (it.hasNext()) {
			lastOne = it.next();
			if (lastOne instanceof TestFlow) {
				execute((TestFlow) lastOne, context);
			}
			if (lastOne instanceof TestProject) {
				execute((TestProject) lastOne, context);
			}
			if (lastOne instanceof TestSuite) {
				execute((TestSuite) lastOne, context);
			}
		}
		testExplorer.setSelectionOn(lastOne);
	}

	/**
	 * 
	 * @param context
	 *            to get the Testcase tree.
	 * @return true if one or more elements are selected in the TestCasetree.
	 */
	@CanExecute
	public boolean canExecute(IEclipseContext context) {
		TestExplorer testExplorer = (TestExplorer) context.get(TestEditorConstants.TEST_EXPLORER_VIEW);
		CanExecuteTestExplorerHandlerRules rules = new CanExecuteTestExplorerHandlerRules();
		return (rules.canExecuteOnOneOrManyElementRule(testExplorer) && rules.canExecuteOnNoneRootRule(testExplorer))
				|| rules.canExecuteOnTestProjectRule(testExplorer);
	}

}
